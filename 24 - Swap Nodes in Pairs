Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

 

Example 1:


Input: head = [1,2,3,4]
Output: [2,1,4,3]
Example 2:

Input: head = []
Output: []
Example 3:

Input: head = [1]
Output: [1]
 

Constraints:

The number of nodes in the list is in the range [0, 100].
0 <= Node.val <= 100

----------------------------------------------------------------------------------------------------

Code

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 // Solution one by using iteration
class Solution {
    public ListNode swapPairs(ListNode head) {
        if ( head == null)
        return null;
        ListNode prevNode = new ListNode(0);
        prevNode.next = head;
        ListNode newHead = prevNode;
        while(prevNode.next != null && prevNode.next.next != null){
            ListNode node1 = prevNode.next;
            ListNode node2 = node1.next;
            ListNode nextNode = node2.next;
            prevNode.next = node2;
            node2.next = node1;
            node1.next = nextNode;
            prevNode = node1;
        }
        return newHead.next;
    }
}

// solution 2 by resursion

class Solution {
    public ListNode swapPairs(ListNode head) {
        if ( head == null || head.next == null)
        return head;
            ListNode node1 = head;
            ListNode node2 = head.next;
            ListNode nextNode = node2.next;
            node1.next = nextNode;
            node2.next = node1;
            if (nextNode != null){
                node1.next = swapPairs(nextNode);
            }
            return node2;
    }
}
