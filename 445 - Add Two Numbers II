You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]
Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]
Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

-------------------------------------------------------------------------------------------------

Code 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<>();
        while(l1 != null){
            s1.push(l1.val);
            l1 = l1.next;
        } 
        Stack<Integer> s2 = new Stack<>();
        while(l2 != null){
            s2.push(l2.val);
            l2 = l2.next;
        }
        int carry = 0;
        ListNode result = null;
        while(!s1.isEmpty() || !s2.isEmpty() || carry != 0){
            int n1 = s1.isEmpty() ? 0: s1.pop();
            int n2 = s2.isEmpty() ? 0: s2.pop();
            int temp = n1+ n2+ carry;
            ListNode result1 = new ListNode(temp % 10);
            result1.next = result;
            result = result1;
            carry = temp / 10;
        }
        return result;
    }
}
